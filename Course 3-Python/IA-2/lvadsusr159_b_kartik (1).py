# -*- coding: utf-8 -*-
"""LVADSUSR159_b.kartik

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yHcbRjGUllCLrGHCaQzAmgi2XUXRqplb
"""

#1
import pandas as pd
import numpy as np

arr=np.array([1,2,3,4,5])

print(arr.sum())
print(arr.mean())
print(arr.std())
print(arr.max())
print(arr.min())

#2
def normalize_attributes(data):

    mean = np.mean(data, axis=0)
    std_dev = np.std(data, axis=0)

    normalized_data = (data - mean) / std_dev

    return normalized_data

health_data = np.array([[160, 70, 30],   # height, weight, age for individual 1
                        [165, 65, 35],   # height, weight, age for individual 2
                        [170, 75, 40]])  # height, weight, age for individual 3

normalized_data = normalize_attributes(health_data)
print("Normalized data:")
print(normalized_data)

#3

df=pd.DataFrame({1,2,3,4,5,6})

# df['avg_score_last_3']=df.groupby('sub')['marks'].sum()
# df

#4
import random
arr = np.random.randint(15,25,size = (24))
arr

#5
daily_closing_prices = np.array([100, 102, 98, 105, 107, 110, 108, 112, 115, 118, 120])
window_size = 5
daily_closing_prices.reshape(11,1)
daily_closing_prices['Moving_avg'] = daily_closing_prices[0].rolling(window=window_size).mean()
daily_closing_prices

#6

#7
properties_matrix = np.array([[1, 2, 3],
                              [4, 5, 6],
                              [7, 8, 9]])

#8
arr1 = np.array([[1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]])

condition = arr1<5

selected_rows = arr1[condition]

print("Original array:")
print(arr1)
print("Selected rows based on the condition:")
print(selected_rows)

#9
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}


df=pd.DataFrame(data)

new_df=df[(df['Department']=='HR') & (df['Age']<45)]

print(new_df['Name'])

#10
data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
        'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
        'Sales': [70000, 50000, 30000, 40000, 60000]}

df=pd.DataFrame(data)

avg_sales=df.groupby('Department')['Sales'].mean().sort_values(ascending=False)
avg_sales

#11
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df=pd.DataFrame(data)

new_df=df[(df['Category']=='Fruit') & (df['Promotion']==False)]
new_df

#12
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}

# Dataset of employee project assignments
project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}

employee_df = pd.DataFrame(employee_data)
project_df = pd.DataFrame(project_data)

merged_df = pd.merge(project_df, employee_df, on='Employee', how='left')


merged_df['Department'] = merged_df['Department'].fillna('Unassigned')
merged_df['Manager'] = merged_df['Manager'].fillna('Unassigned')


department_overview = merged_df.groupby(['Department', 'Manager'])['Project'].apply(list).reset_index()

print("Departmental Overview:")
print(department_overview)

#13
df=pd.read_csv("/content/Q13_sports_team_stats.csv")

df['Win ratios']=(df['Wins']/df['GamesPlayed'])

#14
df=pd.read_csv("/content/Q14_customer_purchases.csv")
df['Date'] = pd.to_datetime(df['Date'])
df['LoyaltyProgramSignUp'] = pd.to_datetime(df['LoyaltyProgramSignUp'])

withoutLoyaltyProgram=(df['LoyaltyProgramSignUp']>df['Date'])
withLoyaltyProgram=(df['LoyaltyProgramSignUp']<df['Date'])

#15
df=pd.read_csv("/content/Q15_student_grades.csv")

subject_for_improvement=df.groupby('Subject')['Grade'].mean().sort_values(ascending=True).head(1)
print("This subject needs improvement: \n")
subject_for_improvement