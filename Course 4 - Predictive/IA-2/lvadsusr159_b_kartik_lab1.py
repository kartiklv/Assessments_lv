# -*- coding: utf-8 -*-
"""lvadsusr159_b_kartik_lab1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14XL8HWxNP6jsBRoiKNnjJXsLCtv6Mk4E
"""

# A
import pandas as pd

wine_df = pd.read_csv('/content/winequality-red.csv')

wine_df.info()

wine_df.head(5)

# (i)
wine_df.isnull().sum()

wine_df = wine_df.bfill(axis='columns')

wine_df.isnull().sum()

# (ii)
import matplotlib.pyplot as plt
import seaborn as sns
plt.boxplot(wine_df['fixed acidity'])

wine_df = wine_df[wine_df['fixed acidity']<12.5]
wine_df = wine_df[wine_df['fixed acidity']>4]

plt.boxplot(wine_df['alcohol'])

wine_df = wine_df[wine_df['alcohol']<13.3]

plt.boxplot(wine_df['volatile acidity'])

wine_df = wine_df[wine_df['volatile acidity']<1.0]

plt.boxplot(wine_df['citric acid'])

wine_df = wine_df[wine_df['citric acid']<=0.8]

plt.boxplot(wine_df['residual sugar'])

wine_df = wine_df[wine_df['residual sugar']<4]

plt.boxplot(wine_df['chlorides'])

wine_df = wine_df[wine_df['chlorides']<0.11]
wine_df = wine_df[wine_df['chlorides']>0.04]

wine_df.loc[wine_df['quality'] <= 6, 'quality'] = 0
wine_df.loc[wine_df['quality'] > 6, 'quality'] = 1

sns.displot(wine_df['fixed acidity'])

sns.displot(wine_df['free sulfur dioxide'])

sns.displot(wine_df['alcohol'])

sns.displot(wine_df['density'])

"""#There is no categorical features in this dataset."""

# B (i)

wine_df.duplicated().count()

# C
wine_df.drop_duplicates()

# D & E
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(wine_df.drop('quality',axis='columns'),wine_df['quality'],test_size=0.3)

# F
from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier(n_estimators=100, random_state=42)

clf.fit(x_train, y_train)
predictions = clf.predict(x_test)

# G
from sklearn.metrics import accuracy_score, precision_score, recall_score

accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", round(accuracy*100,2),"%")
prec = precision_score(y_test, predictions)
print("Precision:", round(prec*100,2),"%")
recall = recall_score(y_test, predictions)
print("Recall:", round(recall*100,2),"%")