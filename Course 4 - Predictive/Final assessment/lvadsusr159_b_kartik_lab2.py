# -*- coding: utf-8 -*-
"""lvadsusr159_b_kartik_lab2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HYkqu3KkADcD0gGD9y2euM7fvcOMxZcx
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import r2_score,mean_squared_error, silhouette_score, accuracy_score, recall_score, precision_score, f1_score
import math

df = pd.read_csv("/content/penguins_classification.csv")
df

df.info()

df.describe()

corr = df.corr(numeric_only = True)
sns.heatmap(corr)

df.isnull().sum()

df.drop_duplicates()

for cols in df.select_dtypes(include=['int','float']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[cols])
    plt.title(f'Histogram of {cols}')
    plt.xlabel(cols)
    plt.ylabel('Frequency')
    plt.show()

for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

for column in df.select_dtypes(include=['int64','float64']).columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

list = []
for cols in list:
  Q1 = df.cols.quantile(0.25)
  Q3 = df.cols.quantile(0.75)
  IQR = Q3-Q1
  lb = Q1-1.5*IQR
  ub = Q3+1.5*IQR
  df = df[(cols > lb) & (cols < ub)]

from sklearn.preprocessing import LabelEncoder

lbl_enc = LabelEncoder()

df['island'] = lbl_enc.fit_transform(df['island'])
df['species'] = lbl_enc.fit_transform(df['species'])

model_mode = df['species'].mode()[0]
df['species'] = df['species'].fillna(model_mode)

model_mode = df['island'].mode()[0]
df['island'] = df['island'].fillna(model_mode)

model_mode = df['bill_length_mm'].mode()[0]
df['bill_length_mm'] = df['bill_length_mm'].fillna(model_mode)

model_mode = df['bill_depth_mm'].mode()[0]
df['bill_depth_mm'] = df['bill_depth_mm'].fillna(model_mode)

model_mode = df['flipper_length_mm'].mode()[0]
df['flipper_length_mm'] = df['flipper_length_mm'].fillna(model_mode)

model_mode = df['body_mass_g'].mode()[0]
df['body_mass_g'] = df['body_mass_g'].fillna(model_mode)

from sklearn.model_selection import train_test_split

X = df.drop(['year','species'],axis=1)
y = df['species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=40)

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

MSE = mean_squared_error(y_test, y_pred)
RMSE = np.sqrt(MSE)
r2 = r2_score(y_test, y_pred)
print("Random Forest \nMSE:", MSE)
print("RMSE:", RMSE)
print("R2 score:", r2)