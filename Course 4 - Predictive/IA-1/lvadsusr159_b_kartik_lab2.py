# -*- coding: utf-8 -*-
"""lvadsusr159_b_kartik LAB2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gHDgd2J-ehDqQTuDs-TQstUy0oag44y7
"""

import pandas as pd

book_df = pd.read_csv("/content/booking.csv")

book_df.info()

book_df

book_df.describe()

nulls = book_df.isnull().sum()
nulls

#outliers detection
import seaborn as sns
avg_price_outliers = sns.boxplot(book_df['average price'])

book_df = book_df[book_df['average price']<200]

lead_time_outliers = sns.boxplot(book_df['lead time'])

book_df = book_df[book_df['lead time']<300]

book_df.info()

#2.
from sklearn.preprocessing import LabelEncoder

lbl_enc = LabelEncoder()
book_df['type of meal'] = lbl_enc.fit_transform(book_df['type of meal'])
book_df['room type'] = lbl_enc.fit_transform(book_df['room type'])
book_df['market segment type'] = lbl_enc.fit_transform(book_df['market segment type'])
book_df['booking status'] = lbl_enc.fit_transform(book_df['booking status'])

import matplotlib.pyplot as plt
plt.scatter(book_df['number of adults'],book_df['average price'])

plt.scatter(book_df['number of children'],book_df['average price'])

plt.scatter(book_df['number of weekend nights'],book_df['average price'])

plt.scatter(book_df['number of week nights'],book_df['average price'])

#3.
# Feature selection
book_df = book_df.drop(columns=['date of reservation','Booking_ID'],axis=1)

# Removing duplicates
duplicates = book_df.duplicated(keep=False)
book_df['dup_bool'] = duplicates
book_df[book_df['dup_bool'] == True].count()

book_df = book_df[book_df['dup_bool'] == False]
book_df = book_df.drop('dup_bool',axis=1)
book_df.count()

#4.
from sklearn.model_selection import train_test_split

X = book_df.drop('booking status',axis=1)
y = book_df['booking status']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

#5.
from sklearn.linear_model import LogisticRegression

model = LogisticRegression(random_state=0,max_iter=10000)

trained_model = model.fit(X_train,y_train)

y_pred = trained_model.predict(X_test)

y_pred

#6.
from sklearn.metrics import recall_score, accuracy_score,precision_score, f1_score

accuracy = accuracy_score(y_test,y_pred)
precision = precision_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)

print('Accuracy score --> ',accuracy)
print('Precision score --> ',precision)
print('Recall score --> ',recall)